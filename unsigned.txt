#include "../minishell.h"

//free the memory allocated by the split
void	free_split(t_minishell	 *mini)
{
	int	i;

	i = 0;
	while (i < mini->count_str)
	{
		free(mini->str[i]);
		i++;
	}
	free(mini->str);
}

void	built_in_cmd_2(t_minishell	*mini, char **env)
{
	char	*args[10];

	args[0] = ft_strdup("ls");
	args[1] = NULL;
	if (ft_strncmp(mini->str[0], "echo", ft_strlen(mini->str[0])) == 0)
		ft_echo(mini);
	else if (ft_strncmp(mini->str[0], "cd", ft_strlen(mini->str[0])) == 0)
		ft_cd(mini);
	else if (ft_strncmp(mini->str[0], "pwd", ft_strlen(mini->str[0])) == 0)
		ft_pwd();
	else if (ft_strncmp(mini->str[0], "env", ft_strlen(mini->str[0])) == 0)
		ft_env(env, mini);
	// else if (ft_strncmp(mini->str[0], "ls", ft_strlen(mini->str[0])) == 0)
	// 	execve("/bin/ls", args, env);
	else if (ft_strncmp(mini->str[0], "unset", ft_strlen(mini->str[0])) == 0)
		ft_unste(mini);
	else if (ft_strncmp(mini->str[0], "export", ft_strlen(mini->str[0])) == 0)
	{
		puts("\n\n\n\n\n");
		ft_export(mini);
	}
	else
		perror(mini->str[0]);
}

void	built_in_cmd(t_minishell	*mini, char **env)
{
	int 	status;
	char	*str;
	char	*args[10];

	args[0] = ft_strdup("ls");
	args[1] = NULL;
	str = readline("MINISHELL-3.2$ ");
	str = ft_strtrim(str, " ");
	mini->count_str = 0;
	if (ft_strlen(str) == 0)
		return ;
	mini->str = ft_split(str, ' ');
	mini->count_str = count(str, ' ');
	built_in_cmd_2(mini, env);
	add_history(str);
	if ((fork() == 0) && ft_strncmp(mini->str[0], "ls", ft_strlen(mini->str[0])) == 0)
	{
		// else if (ft_strncmp(mini->str[0], "ls", ft_strlen(mini->str[0])) == 0)
		execve("/bin/ls", args, env);
	}
	wait(&status);
	free(str);
	free_split(mini);
}	

void		ft_export(t_minishell	*mini)
{
	int	i;
	int	j;
	int	k;
	char **new_env;

	i = 0;
	j = 0;
	k = 0;
	if (mini->str[1])
	{
		while (mini->my_env[j])
			j++;
		k = j;
		while (j >= 0)
		{
			printf("%s\n", mini->my_env[i]);
			i++;
			j--;
		}
		// printf("j == %d\n", j);
		new_env = malloc(sizeof(char *) * j + 2);
		i = 0;
		while (mini->my_env[i])
		{
			new_env[i] = ft_strdup(mini->my_env[i]);
			i++;
		}
		new_env[j] = mini->str[1];
		i = 0;
		while(j >= 0)
		{
			mini->my_env[i] = ft_strdup(new_env[i]);
			i++;
			j--;
		}
		printf("-----------------------i--------------->%d\n", i);
		printf("-----------------------j--------------->%d\n", j);
		i = 0;
		j = k;
		// while (j >= 0)
		// {
		// 	printf("%s\n", mini->my_env[i]);
		// 	i++;
		// 	j--;
		// }
	}
	else
		printf("declare -x \"%s\"\n", mini->my_env[0]);
}


int	ft_cd(t_minishell	*mini)
{
	char *home;
	
	home = getenv("HOME");
	if (!mini->str[1])
	{
		chdir(home);
	}
	else if (chdir(mini->str[1]) != 0) 
	{
		perror("cd");
		return (1);
	}
	return (0);
}

void	ft_pwd()
{
	char	str[1024];

	getcwd(str, sizeof(str));
	printf("%s\n", str);
}




void	prep(char	*str)
{
	int	i;
	int	check;

	i = 0;
	check = 0;
	while (str[i])
	{
		// if (((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')) && str[i + 1] == 32)
		if (ft_isalpha(str[i]) && ((str[i + 1] >= 9 && str[i + 1] <= 13) || str[i + 1] == 32))
			str[i + 1] = '?';
		else if (((str[i] >= 9 && str[i] <= 13) || str[i] == 32) && str[i + 1] != 32)
			str[i] = '?';
		else if (str[i] == '"')
		{
			str[i - 1] = '?';
			i++;
			while (str[i] != '"')
				i++;
			str[i + 1] = '?';
		}
		else if (str[i] == '\'')
		{
			str[i - 1] = '?';
			i++;
			while (str[i] != '\'')
				i++;
			str[i + 1] = '?';
		}
		i++;
	}
	str[i] = '\0';
	printf("str == :%s:\n", str);
}


void	space_check(char c, t_space_checker	*sp)
{
	static int ls;

	if (c == '\'' || c == '"')
	{
		ls++;
		sp->check = 1;
	}
	// else if (ls != 1)
	// 	sp->check = 0;
	printf("ls == %d\n", ls);
	if (ls == 2)
	{
		sp->check = 0;
		ls = 0;
	}
	// printf("sp->check == %d, ls == %d, c == :%c:\n", sp->check, ls, c);
}



//puts a marker at the end of every string 
char	*prep(char	*str)
{
	int	i;
	int	j;
	char	*var;
	
	var = malloc(sizeof(char) * ft_strlen(str) + 20);
	i = 0;
	j = 0;
	while (str[i])
	{
		if (((str[i] >= 9 && str[i] <= 13) || str[i] == 32))
			str[i] = 11;
		else if (str[i] == '"')
		{
			if (((str[i - 1] >= 9 && str[i - 1] <= 13) || str[i - 1] == 32))
				str[i - 1] = 11;
			var[j - 1] = str[i - 1];
			var[j] = str[i];
			i++;
			j++;
			while (str[i] != '"')
			{
				var[j] = str[i];
				j++;
				i++;
			}
		}
		else if (str[i] == '\'')
		{
			str[i - 1] = 11;
			var[j - 1] = str[i - 1];
			var[j] = str[i];
			i++;
			j++;
			while (str[i] != '\'')
			{
				var[j] = str[i];
				j++;
				i++;
			}
		}
		if ((str[i] == '>' && str[i + 1] == '>') || (str[i] == '<' && str[i + 1] == '<'))
		{
			var[j] = 11;
			var[++j] = str[i];
			var[++j] = str[++i];
			var[++j] = 11;
		}
		else if ((str[i] == '|' || str[i] == '>' || str[i] == '<' || (str[i] == '>' && \
		str[i + 1] == '>') || (str[i] == '<' && str[i + 1] == '<')))
		{
			var[j] = 11;
			var[++j] = str[i];
			var[++j] = 11;
		}
		else
			var[j] = str[i];
		i++;
		j++;
		var[j] = '\0';
	}
	return (var);
}
